/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.schlibbuz.commons.argsscanner;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ArgsScanner {

    private static final Logger w = LogManager.getLogger(ArgsScanner.class);
    private static final String AS_CONFIG_JSON = "src/main/resources/as.config.json";

    /**
     * 
     */
    private final ArgsConfig config;
    private final Map<String, Object> appSettings;
    /**
     * backup copy of commandline args
     */
    private final String originalArgsLine;

    /**
     * El constructorino
     * @param args - commandline arguments
     */
    public ArgsScanner(String[] args) {
        originalArgsLine = String.join(" ", args);
        w.trace(originalArgsLine);
        config = ArgsConfig.fromJSON(AS_CONFIG_JSON);
        appSettings = buildAppSettings(args);
    }

    /**
     * prepare settings map for app to use
     * @param args - commandline arguments
     * @return settings map
     */
    Map<String, Object> buildAppSettings(String[] args) {
        var argsList = (LinkedList<String>)normalizeArgs(args);
        var runMode = argsList.pollFirst();
        var target = argsList.pollLast();
        argsList = (LinkedList<String>)unifyOptionDuplicates(shortifyOptions(argsList));
        argsList.addFirst(runMode);
        argsList.addLast(target);
        var errors = validateArgs(argsList);

        if (!errors.isEmpty()) {
            errors.forEach(w::error);
            return null;
        }

        return buildSettingsMap(argsList);
    }

    Map<String, Object> buildSettingsMap(LinkedList<String> argsList) {
        var m = new LinkedHashMap<String, Object>();
        m.put("runmode", argsList.peekFirst());
        for (int i = 1; i < argsList.size() - 1; i++) {
            m.put(argsList.get(i), 1);
        }
        m.put("target", argsList.peekLast());
        return m;
    }
    /**
     * Getter for private var appSettings
     * @return settings ready to use for app
     */
    public Map<String, Object> getAppSettings() {
        return appSettings;
    }


    /**
     * validity check
     * @param args
     * @return
     */
    List<ArgError> validateArgs(List<String> args) {

        List<ArgError> errors = new LinkedList<>();

        if (!config.isRunModeValid(args.get(0))) {
            errors.add(
                new ArgError(0, args.get(0), "this mode is not supported")
            );
        }

        for (int i = 1; i < args.size()-1; i++) {
            String arg = args.get(i);
            if (config.isOption(arg) && !config.isOptionValid(arg)) {
                new ArgError(0, args.get(i), "invalid option");
            }
        }

        return errors;
    }

    List<String> normalizeArgs(String[] args) {
        LinkedList<String> argsList = new LinkedList<>(Arrays.asList(args));

        if (argsList.isEmpty()) {
            return encapsulateWithDefaults(argsList);
        }

        if (argsList.size() == 1) {
            String arg0 = argsList.get(0);
            if (config.isOption(arg0)) {
                argsList = (LinkedList<String>)encapsulateWithDefaults(argsList);
            } else if(config.isRunModeValid(arg0)) {
                argsList.add(config.getTarget());
            } else {
                argsList.addFirst(config.getRunMode());
            }
        }

        return normalizeOptions(argsList);
    }

    LinkedList<String> normalizeOptions(LinkedList<String> optsList) {
        for (int i = 0; i < optsList.size(); i++) {
            String arg = optsList.get(i);
            if (config.isOptionLong(arg)) {
                optsList.set(i, config.getOptionShort(arg));
            }
        }
        return optsList;
    }

    /**
     * '--long-option' becomes '-lo'
     * @param optsList
     * @return
     */
    List<String> shortifyOptions(List<String> optsList) {
        return optsList;
    }

    /**
     * '-if pdf xml -if html' becomes '-if html pdf xml'
     * @param optsList
     * @return
     */
    List<String> unifyOptionDuplicates(List<String> optsList) {
        return optsList;
    }

    /**
     * '-jo' becomes 'run -jo index.html'
     * @param argsList
     * @return
     */
    List<String> encapsulateWithDefaults(LinkedList<String> argsList) {
        argsList.addFirst(config.getRunMode());
        argsList.addLast(config.getTarget());
        return argsList;
    }
}
