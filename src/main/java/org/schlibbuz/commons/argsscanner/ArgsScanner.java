/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.schlibbuz.commons.argsscanner;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ArgsScanner {

    private static final Logger w = LogManager.getLogger(ArgsScanner.class);
    private static final String AS_CONFIG_JSON = "src/main/resources/as.config.json";
    private static final String RUNMODE_DEFAULT = "runmodes->default";
    private static final String TARGET_DEFAULT = "target-default";

    private final ArgsScannerConfig config;
    private final Map<String, Object> appSettings;
    private final Map<String, String> options;
    private final Map<String, String> optionAliases;
    private final String originalArgsLine;


    public ArgsScanner(String[] args) {
        originalArgsLine = dumpArgs(args);
        w.trace(originalArgsLine);
        config = ArgsScannerConfig.fromJSON(AS_CONFIG_JSON);
        options = config.loadOptions();
        optionAliases = config.loadOptionAliases();
        appSettings = buildAppSettings(args);
    }

    Map<String, Object> buildAppSettings(String[] args) {
        var argsList = normalizeArgs(args);
        var errors = validateArgs(argsList);

        if (!errors.isEmpty()) {
            errors.forEach(w::error);
            return null;
        }

        var m = new LinkedHashMap<String, Object>();
        m.put("runmode", argsList.peekFirst());
        for (int i = 1; i < argsList.size() - 1; i++) {
            m.put(argsList.get(i), 1);
        }
        m.put("target", argsList.peekLast());
        return m;
    }

    Map<String, Object> getAppSettings() {
        return appSettings;
    }

    String dumpArgs(String[] args) {

        if (args.length == 0) return "";

        var s = new StringBuilder();
        for (var arg : args) {
            s.append(arg).append(" ");
        }
        return s.deleteCharAt(s.length()-1).toString();
    }

    List<ArgError> validateArgs(List<String> args) {

        List<ArgError> errors = new LinkedList<>();

        if (!isRunModeValid(args.get(0))) {
            errors.add(
                new ArgError(0, args.get(0), "this mode is not supported")
            );
        }

        for (int i = 1; i < args.size()-1; i++) {
            String arg = args.get(i);
            if (isOption(arg) && !isOptionValid(arg)) {
                new ArgError(0, args.get(i), "invalid option");
            }
        }

        return errors;
    }

    LinkedList<String> normalizeArgs(String[] args) {
        LinkedList<String> argsList = new LinkedList<>(Arrays.asList(args));

        if (argsList.isEmpty()) {
            return encapsulateWithDefaults(argsList);
        }

        if (argsList.size() == 1) {
            String arg0 = argsList.get(0);
            if (isOption(arg0)) {
                argsList = encapsulateWithDefaults(argsList);
            } else if(isRunModeValid(arg0)) {
                argsList.add(config.get(TARGET_DEFAULT));
            } else {
                argsList.addFirst(config.get(RUNMODE_DEFAULT));
            }
        }

        return normalizeOptions(argsList);
    }

    LinkedList<String> normalizeOptions(LinkedList<String> argsList) {
        for (int i = 0; i < argsList.size(); i++) {
            String arg = argsList.get(i);
            if (isOptionLong(arg)) {
                argsList.set(i, optionAliases.get(arg));
            }
        }
        return argsList;
    }

    LinkedList<String> encapsulateWithDefaults(LinkedList<String> argsList) {
        argsList.addFirst(config.get(RUNMODE_DEFAULT));
        argsList.addLast(config.get(TARGET_DEFAULT));
        return argsList;
    }

    boolean isOption(final String arg) {
        return  !arg.isBlank()
                &&
                arg.startsWith("-");
    }

    boolean isOptionLong(final String arg) {
        return  arg.length() > 1
                &&
                arg.startsWith("--");
    }

    boolean isOptionValid(final String option) {
        return options.containsKey(option);
    }

    boolean isRunModeValid(String arg) {
        var runModes = config.getRunModes();
        for(var runMode : runModes) {
            if (runMode.equalsIgnoreCase(arg))
                return true;
        }
        return false;
    }
}
